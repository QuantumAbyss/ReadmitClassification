install.packages(c("dplyr", "data.table", "ggplot2"))
knitr::opts_chunk$set(echo = TRUE)
.x <- c("data.table", "dplyr")
lapply(.x, library, character.only = TRUE)
options(scipen=999)
.x <- c("data.table", "dplyr")
lapply(.x, library, character.only = TRUE)
options(scipen=999)
setwd("./Documents/ReadmitClassification/")
dat <- fread("./dataset_diabetes/diabetic_data.csv")
dat <- fread("./dataset_diabetes/diabetic_data.csv")
dat$readmitted[which(dat$readmitted==">30")] <- "NO"
table(dat$readmitted)
.x <- c("data.table", "dplyr", "randomForest")
lapply(.x, library, character.only = TRUE)
install.packages("randomForest")
lapply(.x, library, character.only = TRUE)
library(randomForest)
?randomForest
?sample
indexes <- sample(.7*nrow(dat))
max(indexes)
idx <- sample(.7*nrow(dat), size=nrow(dat))
idx <- sample(nrow(dat), size=.7*nrow(dat))
max(idx)
idx <- sample(nrow(dat), size=.7*nrow(dat))
train <- dat[idx,]
valid <- dat[-idx,]
rfmodel <- randomForest(train, readmitted ~ ., importance = T)
idx <- sample(nrow(dat), size=.7*nrow(dat))
train <- dat[idx,]
valid <- dat[-idx,]
rfmodel <- randomForest(readmitted ~ ., dat=train, importance = T)
dat <- fread("./dataset_diabetes/diabetic_data.csv")
dat$readmitted[which(dat$readmitted==">30")] <- "NO"
table(dat$readmitted)
colnames(dat) <- gsub("-", "_", colnames(dat))
idx <- sample(nrow(dat), size=.7*nrow(dat))
train <- dat[idx,]
valid <- dat[-idx,]
rfmodel <- randomForest(readmitted ~ ., dat=train, importance = T)
dat <- fread("./dataset_diabetes/diabetic_data.csv")
dat$readmitted[which(dat$readmitted==">30")] <- "NO"
table(dat$readmitted)
colnames(dat) <- gsub("-", "_", colnames(dat))
dat <- as.data.frame(dat)
dat <- fread("./dataset_diabetes/diabetic_data.csv", stringsAsFactors = T)
dat$readmitted[which(dat$readmitted==">30")] <- "NO"
table(dat$readmitted)
colnames(dat) <- gsub("-", "_", colnames(dat))
idx <- sample(nrow(dat), size=.7*nrow(dat))
train <- dat[idx,]
valid <- dat[-idx,]
rfmodel <- randomForest(readmitted ~ ., dat=train, importance = T)
dat <- fread("./dataset_diabetes/diabetic_data.csv", stringsAsFactors = T)
dat$readmitted[which(dat$readmitted==">30")] <- "NO"
table(dat$readmitted)
colnames(dat) <- gsub("-", "_", colnames(dat))
dat <- dat %>% select(-c(medical_specialty, diag_1, diag_2, diag_3))
dat <- fread("./dataset_diabetes/diabetic_data.csv", stringsAsFactors = T)
dat$readmitted[which(dat$readmitted==">30")] <- "NO"
dat$readmitted <- as.factor(as.character(dat$readmitted)) # Part of factors in R, requires refactoring
table(dat$readmitted)
colnames(dat) <- gsub("-", "_", colnames(dat))
dat <- dat %>% select(-c(medical_specialty, diag_1, diag_2, diag_3))
idx <- sample(nrow(dat), size=.7*nrow(dat))
train <- dat[idx,]
valid <- dat[-idx,]
rfmodel <- randomForest(readmitted ~ ., dat=train, importance = T)
rfmodel
summary(rfmodel)
rfmodel
importance(rfmodel)
varImpPlot(model.rf)
varImpPlot(rfmodel)
valid$pred <- predict(rfmodel, valid)
install.packages("pROC")
library(pROC)
#valid$pred <- predict(rfmodel, valid)
rfROC<-roc(train$readmitted, rfmodel$votes[,2])
plot(rfROC)
auc(rfROC)
require(randomForest)
data(iris)
# This will make drop a class to make it a 2 class problem
iris<-iris[-which(iris$Species=="setosa"),]
iris$Species<-as.factor(as.character(iris$Species))
set.seed(71)
iris.rf<-randomForest(Species ~ ., data=iris,ntree=10)
require(pROC)
rf.roc<-roc(iris$Species,iris.rf$votes[,2])
plot(rf.roc)
auc(rf.roc)
?auc
(7841+65) / (71+7841+65+63259)
(63259+71) / (71+7841+65+63259)
iris.rf
(46+46) / (46+3+4+46)
auc(rf.roc)
.x <- c("data.table", "dplyr", "randomForest", "pROC")
lapply(.x, library, character.only = TRUE)
options(scipen=999)
setwd("./Documents/ReadmitClassification/")
dat <- fread("./dataset_diabetes/diabetic_data.csv", stringsAsFactors = T)
dat$readmitted[which(dat$readmitted==">30")] <- "NO"
dat$readmitted <- as.factor(as.character(dat$readmitted)) # Part of factors in R, requires refactoring
table(dat$readmitted)
colnames(dat) <- gsub("-", "_", colnames(dat))
dat <- dat %>%
select(-c(encounter_id, patient_nbr)) %>%
select(-c(medical_specialty, diag_1, diag_2, diag_3))
idx <- sample(nrow(dat), size=.7*nrow(dat))
train <- dat[idx,]
valid <- dat[-idx,]
rfmodel <- randomForest(readmitted ~ ., dat=train, importance = T)
rfmodel
varImpPlot(rfmodel)
importance(rfmodel)
#valid$pred <- predict(rfmodel, valid)
rfROC<-roc(train$readmitted, rfmodel$votes[,2])
plot(rfROC)
auc(rfROC)
